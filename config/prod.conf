# XANZHU PRODUCTION SERVER

# Redirect www to non www domain
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name www.xanzhu.com;

#     include Djin/ssl.conf;

#     return 301 $scheme://xanzhu.com$request_uri;
# }

# Redirect Trafic through non-www
server {
    server_name www.xanzhu.com
    listen  80;
    listen  443 ssl http2;
    listen  [::]:80 ipv6only=on;
    listen  [::]443 ssl http2 ipv6only=on;

    include Djin/ssl.conf;

    return 301 https://xanzhu.com$request_uri;
}

# Redirect all non-encrypted to encrypted
server {
    server_name xanzhu.com;
    listen 80;
    listen [::]80;

    return 301 https://xanzhu.com$request_uri;
}

server {
    listen  443 ssl http2;
    listen  [::]:443 ssl http2;
    server_name xanzhu.com;

    # SSL / Certificates
    include Djin/ssl.conf;

    # Security Headers (Experimental)
    include Djin/headers.conf;

    # Static Web Files
    root /Applications/A1.1/dist;

    # 404 Error Page
    error_page 404 /404.html;

    # Cache-Control Header
    location ~* \.(?:js|css|png|jpg|jpeg|gif|ico|svg|svgz|swf)(\?.+)$ {
    add_header Cache-Control "public, max-age=604800, no-transform";
    access_log  off;
    }

    location ~* \.(html)$ {
    add_header Cache-Control "no-cache, no-transform";
    }

    # Cache busting
    location ~* (.+)\.(?:\w+)\.(bmp|css|cur|gif|ico|jpe?g|m?js|png|svgz?|webp|webmanifest)$ {
    try_files $uri $1.$2;
    }

    # Block Access to hiden files
    location ~* /\.(?!well-known\/) {
    deny all;
    }

    #Prevent unwanted HTTP methods (Experimental)
    if ($request_method !~ ^(GET|HEAD|POST)$ ){
       return 444;
    }
}

# # Developer Server (Disabled until needed)
# server { 
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name dev.xanzhu.com;

#     include Djin/ssl.conf; 
#     include Djin/headers.conf; 

#     root /Applications/A1/dist;

#     error_page 404 /404.html;

# }

# Default server with unknown host protection
server {
    listen  443 ssl http2 default_server;
    listen  [::]:443 ssl http2 default_server;

    server_name _;

    include Djin/ssl.conf;

    return 444;
}
